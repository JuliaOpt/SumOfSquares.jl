include("src/csp/MinimalGraph.jl")

G = Graph{Int}()
add_edge!.(G, [(1, 3), (1, 6), (2, 3), (2, 6), (3, 6), (4, 8), (7, 8)])
add_clique!(G, [1,6,5])
Matrix(adjacency_matrix(G))

H, list_cliques = chordal_extension(G)
Matrix(adjacency_matrix(G))
Matrix(adjacency_matrix(H))



G = Graph{Symbol}()
add_edge!(G, :u, :w)
add_clique!(G, [:v, :w, :x])
add_edge!(G, :v, :y)
add_edge!(G, :x, :y)
add_edge!(G, :u, :z)

G = Graph{Symbol}()
add_edge!(G, :v, :u)
add_edge!(G, :u, :x)
add_edge!(G, :x, :y)
add_edge!(G, :z, :x)
add_edge!(G, :x, :w)
add_edge!(G, :w, :v)

G = Graph{Symbol}()
add_edge!(G, (:a, :b))
add_edge!(G, (:a, :e))
add_edge!(G, (:a, :c))
#add_edge!(G, (:b, :e))
add_edge!(G, (:b, :d))
add_edge!(G, (:b, :c))
add_edge!(G, (:d, :c))
add_edge!(G, (:d, :e))
add_edge!(G, (:d, :f))
add_edge!(G, (:f, :e))
add_edge!(G, (:c, :e))
add_edge!(G, (:c, :g))
add_edge!(G, (:e, :g))
add_edge!(G, (:e, :h))
add_edge!(G, (:h, :g))
add_edge!(G, (:h, :i))
add_edge!(G, (:g, :i))
